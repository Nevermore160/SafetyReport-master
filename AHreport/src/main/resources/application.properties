server.port=8080
spring.application.name=Login
#数据库配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
#本地环境
#spring.datasource.druid.url=jdbc:mysql://47.115.43.39:3306/safetyreport?serverTimezone=Hongkong&useUnicode=true&characterEncoding=utf-8&useSSL=false
#Linux环境
spring.datasource.druid.url=jdbc:mysql://localhost:3306/safetyreport?serverTimezone=Hongkong&useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.druid.username=username
spring.datasource.druid.password=password
#加入以下配置 对应生成mapper.xml的路径
mybatis.mapper-locations=classpath:mapper/*.xml
#logging配置
logging.file=${logging.path}/${spring.application.name}.log
logging.path=logs
logging.level.com.lt.bootrbac=debug
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall
#登陆账号密码
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=666666
### 配置根 ###
log4j.rootLogger=debug,console ,fileAppender
### 设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名 ###
log4j.logger.org.apache=dubug
log4j.logger.java.sql.Connection=dubug
log4j.logger.java.sql.Statement=dubug
log4j.logger.java.sql.PreparedStatement=dubug
log4j.logger.java.sql.ResultSet=dubug
### 配置输出到控制台 ###
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
### 配置输出到文件 ###
log4j.appender.fileAppender=org.apache.log4j.FileAppender
log4j.appender.fileAppender.File=logs/daily.log
log4j.appender.fileAppender.Append=true
log4j.appender.fileAppender.Threshold=DEBUG
log4j.appender.fileAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.fileAppender.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


#Linux环境
reportPath.word.templatePath=/report/wordtemplate/template.docx
reportPath.word.wordPath=/report/word/
reportPath.echart.jsPath=/report/echarts-convert/echarts-convert1.js
reportPath.echart.picPath=/report/echart/
reportPath.echart.jsonPath=/report/echartdata/
reportPath.freeMarker.path=/report

#镜像
#reportPath.word.templatePath=/usr/local/otherService/wordtemplate/template.docx
#reportPath.word.wordPath=/usr/local/otherService/word/
#reportPath.echart.jsPath=/usr/local/otherService/echarts-convert/echarts-convert1.js
#reportPath.echart.picPath=/usr/local/otherService/Echart/
#reportPath.echart.jsonPath=/usr/local/otherService/EchartData/
#reportPath.freeMarker.path=/usr/local/otherService/

#Windows环境
#reportPath.word.templatePath=D:/DASecurity/safety-report/AHreport/src/main/resources/wordtemplate/template.docx
#reportPath.word.wordPath=D:/ReportExport/excel/
#reportPath.echart.jsPath=D:/echarts-convert/echarts-convert1.js
#reportPath.echart.picPath=D:/ReportExport/Echart/
#reportPath.echart.jsonPath=D:/ReportExport/EchartData/
#reportPath.freeMarker.path=D:/DASecurity/safety-report/AHreport/src/main/resources
